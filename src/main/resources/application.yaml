#----------------------------------
# Defined for each environment
#----------------------------------
env.rms:
  server.port: 7003
  service.url:
    item: http://localhost:7002
    user: http://localhost:7004
  sec.require.encrypt: false
  sec.aes.passphrase: override-by-secret-file
  h2.user: sa
  h2.password: ${CLEAR=}
  h2.script: classpath:init-rms.ddl

#----------------------------------
# Helidon Configurations
#----------------------------------
server:
  port: ${env.rms.server.port}
  access-log:
    format: "%t %h %r %s %b %D"

security:
  config: # encryption settings for {$ GCM = xxx}
    # set to true for production - if set to true, clear text passwords will cause failure
    require-encryption: ${env.rms.sec.require.encrypt}
    # this should be configured by system property or environment variable for production - the "master" passwords for AES decryption
    aes.insecure-passphrase: ${env.rms.sec.aes.passphrase}

javax.sql.DataSource:
  rmsDataSource:
    dataSourceClassName: org.h2.jdbcx.JdbcDataSource
    dataSource:
      url: jdbc:h2:mem:rms;INIT=RUNSCRIPT FROM '${env.rms.h2.script}'
      # decrypted value => user=sa, password=""
      user: ${env.rms.h2.user}
      password: ${env.rms.h2.password}

web-api-item/mp-rest/url: ${env.rms.service.url.item}
web-api-user/mp-rest/url: ${env.rms.service.url.user}

#----------------------------------
# Applications Configurations
#----------------------------------
rms:
  cdi:
    configuredCdi:
      register:
        - class: io.extact.msa.rms.platform.fw.external.PropagateLoginUserClientHeadersFactory
  persistence:
    apiType: jpa
    csv:
      type: temporary
      # following only used when type is "permanent" or ""temporary"
      permanent:
        directory: ./data
        fileName:
          reservation: reservation.csv
      temporary:
        fileName:
          reservation: temporary/reservationTemp.csv
  healthCheck:
    otherChecks:
      - io.extact.msa.rms.platform.core.health.ReadinessOfOutboundServersHealthCheck
      - io.extact.msa.rms.platform.core.health.DbReadinessCheck
    readinessOfOutboundServersHealthCheck.probe.url:
      - ${env.rms.service.url.item}
      - ${env.rms.service.url.user}
  openapi:
    title: レンタル品サービス公開API
  env:
    main.jar: msa-rms-service-reservation\.jar$
  debug:
    configdump:
      filter-enable: true
      filters:
        #- filter: security
        - filter: server
